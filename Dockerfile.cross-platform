# Cross-platform Docker build for NXOLand Backend
# Alternative approach using platform-specific builds

FROM --platform=$BUILDPLATFORM node:20-alpine AS builder

WORKDIR /app

# Install system dependencies
RUN apk add --no-cache openssl python3 make g++

# Copy package files first
COPY package*.json ./
COPY prisma ./prisma/

# Install dependencies including dev dependencies for Prisma
RUN npm ci

# Copy source code
COPY . .

# Generate Prisma client with proper permissions
RUN chmod +x node_modules/.bin/* || true
RUN npx prisma generate

# Build the application
RUN npm run build

# Production stage - use target platform
FROM --platform=$TARGETPLATFORM node:20-alpine AS production

WORKDIR /app

# Install system dependencies and build tools
RUN apk add --no-cache openssl dumb-init python3 make g++

# Create app user
RUN addgroup -g 1001 -S nodejs && adduser -S nestjs -u 1001

# Copy package files and install dependencies for target platform
COPY --from=builder /app/package*.json ./
RUN npm ci --only=production && npm rebuild

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/prisma ./prisma

# Create logs directory
RUN mkdir -p logs && chown -R nestjs:nodejs logs

# Change ownership
RUN chown -R nestjs:nodejs /app
USER nestjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node --version

# Start the application
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/main.js"]
