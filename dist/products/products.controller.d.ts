import { ProductsService } from './products.service';
import { CreateProductDto, UpdateProductDto, ProductFiltersDto } from '../types';
export declare class ProductsController {
    private productsService;
    constructor(productsService: ProductsService);
    findAll(filters: ProductFiltersDto): Promise<{
        data: ({
            seller: {
                id: number;
                username: string;
                name: string;
                avatar: string;
            };
        } & {
            description: string | null;
            id: number;
            created_at: Date;
            name: string;
            updated_at: Date;
            status: import(".prisma/client").$Enums.ProductStatus;
            slug: string;
            price: import("@prisma/client/runtime/library").Decimal;
            discount_price: import("@prisma/client/runtime/library").Decimal | null;
            category_id: number;
            seller_id: number;
            platform: string | null;
            game: string | null;
            account_level: string | null;
            account_username: string | null;
            stock_quantity: number;
            delivery_time: string;
            setup_instructions: string | null;
            views_count: number;
            sales_count: number;
            rating_avg: import("@prisma/client/runtime/library").Decimal;
            rating_count: number;
            is_featured: boolean;
            featured_until: Date | null;
            metadata: import("@prisma/client/runtime/library").JsonValue | null;
            deleted_at: Date | null;
        })[];
        meta: {
            current_page: number;
            last_page: number;
            per_page: number;
            total: number;
            from: number;
            to: number;
        };
    }>;
    getTrending(limit?: number): Promise<{
        data: ({
            seller: {
                id: number;
                username: string;
                name: string;
                avatar: string;
            };
        } & {
            description: string | null;
            id: number;
            created_at: Date;
            name: string;
            updated_at: Date;
            status: import(".prisma/client").$Enums.ProductStatus;
            slug: string;
            price: import("@prisma/client/runtime/library").Decimal;
            discount_price: import("@prisma/client/runtime/library").Decimal | null;
            category_id: number;
            seller_id: number;
            platform: string | null;
            game: string | null;
            account_level: string | null;
            account_username: string | null;
            stock_quantity: number;
            delivery_time: string;
            setup_instructions: string | null;
            views_count: number;
            sales_count: number;
            rating_avg: import("@prisma/client/runtime/library").Decimal;
            rating_count: number;
            is_featured: boolean;
            featured_until: Date | null;
            metadata: import("@prisma/client/runtime/library").JsonValue | null;
            deleted_at: Date | null;
        })[];
        message: string;
        status: string;
    }>;
    getByCategory(categorySlug: string, filters: ProductFiltersDto): Promise<{
        data: ({
            seller: {
                id: number;
                username: string;
                name: string;
                avatar: string;
            };
        } & {
            description: string | null;
            id: number;
            created_at: Date;
            name: string;
            updated_at: Date;
            status: import(".prisma/client").$Enums.ProductStatus;
            slug: string;
            price: import("@prisma/client/runtime/library").Decimal;
            discount_price: import("@prisma/client/runtime/library").Decimal | null;
            category_id: number;
            seller_id: number;
            platform: string | null;
            game: string | null;
            account_level: string | null;
            account_username: string | null;
            stock_quantity: number;
            delivery_time: string;
            setup_instructions: string | null;
            views_count: number;
            sales_count: number;
            rating_avg: import("@prisma/client/runtime/library").Decimal;
            rating_count: number;
            is_featured: boolean;
            featured_until: Date | null;
            metadata: import("@prisma/client/runtime/library").JsonValue | null;
            deleted_at: Date | null;
        })[];
        meta: {
            current_page: number;
            last_page: number;
            per_page: number;
            total: number;
            from: number;
            to: number;
            category: string;
        };
    }>;
    findOne(id: string): Promise<{
        seller: {
            id: number;
            username: string;
            name: string;
            avatar: string;
        };
    } & {
        description: string | null;
        id: number;
        created_at: Date;
        name: string;
        updated_at: Date;
        status: import(".prisma/client").$Enums.ProductStatus;
        slug: string;
        price: import("@prisma/client/runtime/library").Decimal;
        discount_price: import("@prisma/client/runtime/library").Decimal | null;
        category_id: number;
        seller_id: number;
        platform: string | null;
        game: string | null;
        account_level: string | null;
        account_username: string | null;
        stock_quantity: number;
        delivery_time: string;
        setup_instructions: string | null;
        views_count: number;
        sales_count: number;
        rating_avg: import("@prisma/client/runtime/library").Decimal;
        rating_count: number;
        is_featured: boolean;
        featured_until: Date | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        deleted_at: Date | null;
    }>;
    create(createProductDto: CreateProductDto, req: any): Promise<{
        seller: {
            id: number;
            username: string;
            name: string;
            avatar: string;
        };
        category: {
            description: string | null;
            id: number;
            created_at: Date;
            name: string;
            is_active: boolean;
            updated_at: Date;
            slug: string;
            image: string | null;
            sort_order: number;
            parent_id: number | null;
        };
        images: {
            id: number;
            created_at: Date;
            product_id: number;
            sort_order: number;
            image_url: string;
            alt_text: string | null;
            is_primary: boolean;
        }[];
    } & {
        description: string | null;
        id: number;
        created_at: Date;
        name: string;
        updated_at: Date;
        status: import(".prisma/client").$Enums.ProductStatus;
        slug: string;
        price: import("@prisma/client/runtime/library").Decimal;
        discount_price: import("@prisma/client/runtime/library").Decimal | null;
        category_id: number;
        seller_id: number;
        platform: string | null;
        game: string | null;
        account_level: string | null;
        account_username: string | null;
        stock_quantity: number;
        delivery_time: string;
        setup_instructions: string | null;
        views_count: number;
        sales_count: number;
        rating_avg: import("@prisma/client/runtime/library").Decimal;
        rating_count: number;
        is_featured: boolean;
        featured_until: Date | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        deleted_at: Date | null;
    }>;
    update(id: string, updateProductDto: UpdateProductDto, req: any): Promise<{
        seller: {
            id: number;
            username: string;
            name: string;
            avatar: string;
        };
        category: {
            description: string | null;
            id: number;
            created_at: Date;
            name: string;
            is_active: boolean;
            updated_at: Date;
            slug: string;
            image: string | null;
            sort_order: number;
            parent_id: number | null;
        };
        images: {
            id: number;
            created_at: Date;
            product_id: number;
            sort_order: number;
            image_url: string;
            alt_text: string | null;
            is_primary: boolean;
        }[];
    } & {
        description: string | null;
        id: number;
        created_at: Date;
        name: string;
        updated_at: Date;
        status: import(".prisma/client").$Enums.ProductStatus;
        slug: string;
        price: import("@prisma/client/runtime/library").Decimal;
        discount_price: import("@prisma/client/runtime/library").Decimal | null;
        category_id: number;
        seller_id: number;
        platform: string | null;
        game: string | null;
        account_level: string | null;
        account_username: string | null;
        stock_quantity: number;
        delivery_time: string;
        setup_instructions: string | null;
        views_count: number;
        sales_count: number;
        rating_avg: import("@prisma/client/runtime/library").Decimal;
        rating_count: number;
        is_featured: boolean;
        featured_until: Date | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        deleted_at: Date | null;
    }>;
    remove(id: string, req: any): Promise<{
        description: string | null;
        id: number;
        created_at: Date;
        name: string;
        updated_at: Date;
        status: import(".prisma/client").$Enums.ProductStatus;
        slug: string;
        price: import("@prisma/client/runtime/library").Decimal;
        discount_price: import("@prisma/client/runtime/library").Decimal | null;
        category_id: number;
        seller_id: number;
        platform: string | null;
        game: string | null;
        account_level: string | null;
        account_username: string | null;
        stock_quantity: number;
        delivery_time: string;
        setup_instructions: string | null;
        views_count: number;
        sales_count: number;
        rating_avg: import("@prisma/client/runtime/library").Decimal;
        rating_count: number;
        is_featured: boolean;
        featured_until: Date | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        deleted_at: Date | null;
    }>;
}
