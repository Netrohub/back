// NXOLand Database Schema v2.0
// Normalized, scalable, and production-ready database design
// Following 3NF normalization and modern database practices

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ========================================
// 1. CORE USER MANAGEMENT SYSTEM
// ========================================

model User {
  id                    Int       @id @default(autoincrement())
  username              String    @unique @db.VarChar(50)
  name                  String    @db.VarChar(255)
  email                 String    @unique @db.VarChar(255)
  password              String    @db.VarChar(255)
  phone                 String?   @db.VarChar(20)
  avatar                String?   @db.Text
  email_verified_at     DateTime?
  phone_verified_at     DateTime?
  is_active             Boolean   @default(true)
  is_banned             Boolean   @default(false)
  banned_until          DateTime?
  ban_reason            String?   @db.Text
  last_login_at         DateTime?
  login_attempts        Int       @default(0)
  locked_until          DateTime?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt

  // Relations
  user_roles            UserRole[]
  products              Product[]
  orders_as_buyer       Order[] @relation("BuyerOrders")
  orders_as_seller      Order[] @relation("SellerOrders")
  cart_items            CartItem[]
  wishlist_items        WishlistItem[]
  product_reviews       ProductReview[]
  disputes_as_buyer     Dispute[] @relation("BuyerDisputes")
  disputes_as_seller    Dispute[] @relation("SellerDisputes")
  assigned_disputes     Dispute[] @relation("AssignedDisputes")
  tickets               Ticket[] @relation("UserTickets")
  assigned_tickets      Ticket[] @relation("AssignedTickets")
  ticket_messages       TicketMessage[]
  dispute_messages      DisputeMessage[]
  kyc_verifications     KycVerification[]
  password_resets       PasswordReset[]
  user_sessions         UserSession[]
  admin_actions         AdminAction[]
  audit_logs            AuditLog[]
  payouts               Payout[]
  transactions          Transaction[]

  @@map("users")
  @@index([email])
  @@index([username]) 
  @@index([is_active])
  @@index([created_at])
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  slug        String   @unique @db.VarChar(50)
  description String?  @db.Text
  permissions Json?    // Flexible permission structure
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user_roles  UserRole[]

  @@map("roles")
  @@index([slug])
  @@index([is_active])
}

model UserRole {
  id         Int      @id @default(autoincrement())
  user_id    Int
  role_id    Int
  granted_by Int?     // Admin who granted this role
  granted_at DateTime @default(now())
  expires_at DateTime? // For temporary roles
  created_at DateTime @default(now())

  // Relations
  user       User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role       Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id])
  @@map("user_roles")
  @@index([user_id])
  @@index([role_id])
}

// ========================================
// 2. PRODUCT MANAGEMENT SYSTEM
// ========================================

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  slug        String   @unique @db.VarChar(100)
  description String?  @db.Text
  image       String?  @db.VarChar(500)
  parent_id   Int?     // For hierarchical categories
  sort_order  Int      @default(0)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  products    Product[]
  parent      Category? @relation("CategoryHierarchy", fields: [parent_id], references: [id])
  children    Category[] @relation("CategoryHierarchy")

  @@map("categories")
  @@index([slug])
  @@index([parent_id])
  @@index([is_active])
  @@index([sort_order])
}

model Product {
  id                Int      @id @default(autoincrement())
  name              String   @db.VarChar(255)
  slug              String   @unique @db.VarChar(255)
  description       String?  @db.Text
  price             Decimal  @db.Decimal(10, 2)
  discount_price    Decimal? @db.Decimal(10, 2)
  category_id       Int
  seller_id         Int
  
  // Gaming/Social Media specific fields
  platform          String?  @db.VarChar(100) // Instagram, PlayStation, Xbox, etc.
  game              String?  @db.VarChar(100) // Game name for gaming accounts
  account_level     String?  @db.VarChar(50)  // Level, rank, or followers count
  account_username  String?  @db.VarChar(100) // Account username/handle
  
  // Product management
  status            ProductStatus @default(PENDING)
  stock_quantity    Int      @default(1)
  delivery_time     String   @default("instant") @db.VarChar(50)
  setup_instructions String? @db.Text
  
  // Metrics
  views_count       Int      @default(0)
  sales_count       Int      @default(0)
  rating_avg        Decimal  @default(0.00) @db.Decimal(3, 2)
  rating_count      Int      @default(0)
  
  // Featured/Promotion
  is_featured       Boolean  @default(false)
  featured_until    DateTime?
  
  // Metadata
  metadata          Json?    // Additional flexible data
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  deleted_at        DateTime? // Soft delete

  // Relations
  category          Category @relation(fields: [category_id], references: [id], onDelete: Restrict)
  seller            User @relation(fields: [seller_id], references: [id], onDelete: Restrict)
  images            ProductImage[]
  reviews           ProductReview[]
  cart_items        CartItem[]
  order_items       OrderItem[]
  wishlist_items    WishlistItem[]

  @@map("products")
  @@index([category_id])
  @@index([seller_id])
  @@index([status])
  @@index([is_featured])
  @@index([price])
  @@index([rating_avg])
  @@index([views_count])
  @@index([sales_count])
  @@index([created_at])
  @@index([platform])
  @@fulltext([name, description])
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  product_id Int
  image_url  String   @db.VarChar(500)
  alt_text   String?  @db.VarChar(255)
  sort_order Int      @default(0)
  is_primary Boolean  @default(false)
  created_at DateTime @default(now())

  // Relations
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("product_images")
  @@index([product_id])
  @@index([is_primary])
  @@index([sort_order])
}

model ProductReview {
  id           Int      @id @default(autoincrement())
  product_id   Int
  user_id      Int
  order_id     Int      // Must be from a completed order
  rating       Int      // 1-5 stars
  title        String?  @db.VarChar(255)
  comment      String?  @db.Text
  is_verified  Boolean  @default(false) // Verified purchase
  helpful_count Int     @default(0)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  product      Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user         User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, product_id, order_id]) // One review per user per product per order
  @@map("product_reviews")
  @@index([product_id])
  @@index([user_id])
  @@index([rating])
  @@index([created_at])
}

// ========================================
// 3. ORDER & PAYMENT SYSTEM
// ========================================

model Order {
  id                     Int      @id @default(autoincrement())
  order_number           String   @unique @db.VarChar(50)
  buyer_id               Int
  seller_id              Int
  subtotal               Decimal  @db.Decimal(10, 2)
  service_fee            Decimal  @db.Decimal(10, 2)
  discount_amount        Decimal  @default(0.00) @db.Decimal(10, 2)
  total_amount           Decimal  @db.Decimal(10, 2)
  
  // Status tracking
  status                 OrderStatus @default(PENDING)
  payment_status         PaymentStatus @default(PENDING)
  
  // Payment details
  payment_method         String?  @db.VarChar(50)
  payment_transaction_id String?  @db.VarChar(255)
  
  // Contact info
  buyer_email            String?  @db.VarChar(255)
  buyer_phone            String?  @db.VarChar(20)
  
  // Timestamps
  payment_completed_at   DateTime?
  delivered_at           DateTime?
  completed_at           DateTime?
  cancelled_at           DateTime?
  refunded_at            DateTime?
  
  // Additional info
  notes                  String?  @db.Text
  metadata               Json?    // Additional order data
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt

  // Relations
  buyer                  User @relation("BuyerOrders", fields: [buyer_id], references: [id], onDelete: Restrict)
  seller                 User @relation("SellerOrders", fields: [seller_id], references: [id], onDelete: Restrict)
  items                  OrderItem[]
  transactions           Transaction[]
  disputes               Dispute[]

  @@map("orders")
  @@index([order_number])
  @@index([buyer_id])
  @@index([seller_id])
  @@index([status])
  @@index([payment_status])
  @@index([created_at])
}

model OrderItem {
  id           Int     @id @default(autoincrement())
  order_id     Int
  product_id   Int
  product_name String  @db.VarChar(255) // Snapshot of product name
  quantity     Int
  unit_price   Decimal @db.Decimal(10, 2)
  total_price  Decimal @db.Decimal(10, 2)
  metadata     Json?   // Product snapshot data
  created_at   DateTime @default(now())

  // Relations
  order        Order @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product      Product @relation(fields: [product_id], references: [id], onDelete: Restrict)

  @@map("order_items")
  @@index([order_id])
  @@index([product_id])
}

model Transaction {
  id              Int      @id @default(autoincrement())
  order_id        Int
  user_id         Int
  type            TransactionType
  amount          Decimal  @db.Decimal(10, 2)
  fee_amount      Decimal  @default(0.00) @db.Decimal(10, 2)
  net_amount      Decimal  @db.Decimal(10, 2)
  currency        String   @default("USD") @db.VarChar(3)
  payment_method  String   @db.VarChar(50)
  status          TransactionStatus @default(PENDING)
  reference       String?  @db.VarChar(255) // External payment reference
  gateway         String?  @db.VarChar(50)  // Tap, Stripe, etc.
  gateway_response Json?   // Raw gateway response
  processed_at    DateTime?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  order           Order @relation(fields: [order_id], references: [id], onDelete: Restrict)
  user            User @relation(fields: [user_id], references: [id], onDelete: Restrict)

  @@map("transactions")
  @@index([order_id])
  @@index([user_id])
  @@index([status])
  @@index([type])
  @@index([created_at])
}

// ========================================
// 4. SHOPPING FEATURES
// ========================================

model CartItem {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  quantity   Int      @default(1)
  status     CartStatus @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([user_id, product_id, status])
  @@map("cart_items")
  @@index([user_id])
  @@index([product_id])
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  created_at DateTime @default(now())

  // Relations
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([user_id, product_id])
  @@map("wishlist_items")
  @@index([user_id])
  @@index([product_id])
}

model Coupon {
  id            Int       @id @default(autoincrement())
  code          String    @unique @db.VarChar(50)
  name          String    @db.VarChar(255)
  description   String?   @db.Text
  type          CouponType
  value         Decimal   @db.Decimal(10, 2)
  min_amount    Decimal?  @db.Decimal(10, 2)
  max_discount  Decimal?  @db.Decimal(10, 2)
  usage_limit   Int?
  user_limit    Int?      // Per user usage limit
  used_count    Int       @default(0)
  is_active     Boolean   @default(true)
  starts_at     DateTime?
  expires_at    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  @@map("coupons")
  @@index([code])
  @@index([is_active])
  @@index([expires_at])
}

// ========================================
// 5. DISPUTE SYSTEM
// ========================================

model Dispute {
  id           Int      @id @default(autoincrement())
  order_id     Int
  buyer_id     Int
  seller_id    Int
  reason       String   @db.VarChar(255)
  description  String?  @db.Text
  status       DisputeStatus @default(PENDING)
  priority     DisputePriority @default(MEDIUM)
  assigned_to  Int?     // Admin assigned to handle dispute
  resolution   String?  @db.Text
  resolved_at  DateTime?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  order        Order @relation(fields: [order_id], references: [id], onDelete: Restrict)
  buyer        User @relation("BuyerDisputes", fields: [buyer_id], references: [id], onDelete: Restrict)
  seller       User @relation("SellerDisputes", fields: [seller_id], references: [id], onDelete: Restrict)
  assigned_admin User? @relation("AssignedDisputes", fields: [assigned_to], references: [id], onDelete: SetNull)
  messages     DisputeMessage[]
  evidence     DisputeEvidence[]

  @@map("disputes")
  @@index([order_id])
  @@index([buyer_id])
  @@index([seller_id])
  @@index([status])
  @@index([priority])
  @@index([assigned_to])
  @@index([created_at])
}

model DisputeMessage {
  id         Int      @id @default(autoincrement())
  dispute_id Int
  sender_id  Int
  message    String   @db.Text
  is_internal Boolean @default(false) // Admin-only messages
  created_at DateTime @default(now())

  // Relations
  dispute    Dispute @relation(fields: [dispute_id], references: [id], onDelete: Cascade)
  sender     User @relation(fields: [sender_id], references: [id], onDelete: Restrict)

  @@map("dispute_messages")
  @@index([dispute_id])
  @@index([sender_id])
  @@index([created_at])
}

model DisputeEvidence {
  id          Int      @id @default(autoincrement())
  dispute_id  Int
  uploaded_by Int
  file_url    String   @db.VarChar(500)
  file_name   String   @db.VarChar(255)
  file_type   String   @db.VarChar(50)
  file_size   Int
  description String?  @db.Text
  created_at  DateTime @default(now())

  // Relations
  dispute     Dispute @relation(fields: [dispute_id], references: [id], onDelete: Cascade)

  @@map("dispute_evidence")
  @@index([dispute_id])
  @@index([uploaded_by])
}

// ========================================
// 6. SUPPORT SYSTEM
// ========================================

model Ticket {
  id              Int      @id @default(autoincrement())
  ticket_number   String   @unique @db.VarChar(50)
  user_id         Int
  subject         String   @db.VarChar(255)
  message         String   @db.Text
  status          TicketStatus @default(OPEN)
  priority        TicketPriority @default(MEDIUM)
  category        String?  @db.VarChar(100)
  assigned_to     Int?
  resolved_at     DateTime?
  first_response_at DateTime?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  user            User @relation("UserTickets", fields: [user_id], references: [id], onDelete: Restrict)
  assigned_admin  User? @relation("AssignedTickets", fields: [assigned_to], references: [id], onDelete: SetNull)
  messages        TicketMessage[]

  @@map("tickets")
  @@index([ticket_number])
  @@index([user_id])
  @@index([status])
  @@index([priority])
  @@index([assigned_to])
  @@index([created_at])
}

model TicketMessage {
  id         Int      @id @default(autoincrement())
  ticket_id  Int
  sender_id  Int
  message    String   @db.Text
  is_internal Boolean @default(false)
  created_at DateTime @default(now())

  // Relations
  ticket     Ticket @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  sender     User @relation(fields: [sender_id], references: [id], onDelete: Restrict)

  @@map("ticket_messages")
  @@index([ticket_id])
  @@index([sender_id])
  @@index([created_at])
}

// ========================================
// 7. KYC SYSTEM
// ========================================

model KycVerification {
  id            Int      @id @default(autoincrement())
  user_id       Int
  type          KycType
  status        KycStatus @default(PENDING)
  provider      String?  @db.VarChar(50) // Persona, etc.
  external_id   String?  @db.VarChar(255)
  data          Json?    // Verification data
  documents     Json?    // Document URLs/IDs
  notes         String?  @db.Text
  verified_at   DateTime?
  rejected_at   DateTime?
  expires_at    DateTime?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  user          User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, type])
  @@map("kyc_verifications")
  @@index([user_id])
  @@index([status])
  @@index([type])
  @@index([external_id])
}

// ========================================
// 8. SECURITY SYSTEM
// ========================================

model PasswordReset {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String   @unique @db.VarChar(255)
  expires_at DateTime
  used_at    DateTime?
  ip_address String?  @db.VarChar(45)
  user_agent String?  @db.Text
  created_at DateTime @default(now())

  // Relations
  user       User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("password_resets")
  @@index([user_id])
  @@index([token])
  @@index([expires_at])
}

model UserSession {
  id               String   @id @default(cuid())
  user_id          Int
  device_name      String?  @db.VarChar(255)
  device_type      String?  @db.VarChar(50)
  ip_address       String   @db.VarChar(45)
  user_agent       String?  @db.Text
  location         String?  @db.VarChar(255)
  is_active        Boolean  @default(true)
  last_activity_at DateTime @default(now())
  expires_at       DateTime?
  created_at       DateTime @default(now())

  // Relations
  user             User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_sessions")
  @@index([user_id])
  @@index([is_active])
  @@index([last_activity_at])
}

// ========================================
// 9. ADMIN & AUDIT SYSTEM
// ========================================

model AdminAction {
  id          Int      @id @default(autoincrement())
  admin_id    Int
  action_type String   @db.VarChar(100)
  target_type String   @db.VarChar(50)
  target_id   Int
  description String?  @db.Text
  metadata    Json?
  ip_address  String?  @db.VarChar(45)
  user_agent  String?  @db.Text
  created_at  DateTime @default(now())

  // Relations
  admin       User @relation(fields: [admin_id], references: [id], onDelete: Restrict)

  @@map("admin_actions")
  @@index([admin_id])
  @@index([action_type])
  @@index([target_type])
  @@index([target_id])
  @@index([created_at])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  user_id     Int?
  action      String   @db.VarChar(100)
  entity_type String   @db.VarChar(50)
  entity_id   Int
  old_values  Json?
  new_values  Json?
  ip_address  String?  @db.VarChar(45)
  user_agent  String?  @db.Text
  created_at  DateTime @default(now())

  // Relations
  user        User? @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@map("audit_logs")
  @@index([user_id])
  @@index([action])
  @@index([entity_type])
  @@index([entity_id])
  @@index([created_at])
}

model SystemLog {
  id          Int      @id @default(autoincrement())
  level       LogLevel
  message     String   @db.Text
  context     Json?
  user_id     Int?
  ip_address  String?  @db.VarChar(45)
  user_agent  String?  @db.Text
  created_at  DateTime @default(now())

  @@map("system_logs")
  @@index([level])
  @@index([user_id])
  @@index([created_at])
}

model AdminInvite {
  id          Int      @id @default(autoincrement())
  email       String   @unique @db.VarChar(255)
  invited_by  Int
  role_slug   String   @db.VarChar(50)
  token       String   @unique @db.VarChar(255)
  expires_at  DateTime
  used_at     DateTime?
  created_at  DateTime @default(now())

  @@map("admin_invites")
  @@index([email])
  @@index([token])
  @@index([expires_at])
}

// ========================================
// 10. FINANCIAL SYSTEM
// ========================================

model Payout {
  id              Int      @id @default(autoincrement())
  seller_id       Int
  amount          Decimal  @db.Decimal(10, 2)
  fee_amount      Decimal  @default(0.00) @db.Decimal(10, 2)
  net_amount      Decimal  @db.Decimal(10, 2)
  currency        String   @default("USD") @db.VarChar(3)
  status          PayoutStatus @default(PENDING)
  method          String?  @db.VarChar(50)
  reference       String?  @db.VarChar(255)
  description     String?  @db.Text
  notes           String?  @db.Text
  requested_at    DateTime @default(now())
  processed_at    DateTime?
  completed_at    DateTime?
  failed_at       DateTime?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  seller          User @relation(fields: [seller_id], references: [id], onDelete: Restrict)

  @@map("payouts")
  @@index([seller_id])
  @@index([status])
  @@index([requested_at])
  @@index([created_at])
}

// ========================================
// ENUMS
// ========================================

enum ProductStatus {
  DRAFT
  PENDING
  ACTIVE
  SOLD
  INACTIVE
  REJECTED
  SUSPENDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIAL_REFUND
}

enum TransactionType {
  PAYMENT
  REFUND
  PAYOUT
  FEE
  CHARGEBACK
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum CartStatus {
  ACTIVE
  SAVED_FOR_LATER
  ABANDONED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

enum DisputeStatus {
  PENDING
  INVESTIGATING
  RESOLVED
  CLOSED
  ESCALATED
}

enum DisputePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_CUSTOMER
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum KycType {
  EMAIL
  PHONE
  IDENTITY
  ADDRESS
  BANK_ACCOUNT
}

enum KycStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
  EXPIRED
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
