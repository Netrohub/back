// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int       @id @default(autoincrement())
  username              String    @unique @db.VarChar(50)
  name                  String    @db.VarChar(255)
  email                 String    @unique @db.VarChar(255)
  password              String    @db.VarChar(255)
  phone                 String?   @db.VarChar(20)
  avatar                String?   @db.Text
  roles                 Json      @default("[\"user\"]")
  kyc_status            Json      @default("{\"email\": false, \"phone\": false, \"identity\": false}")
  kyc_documents         Json?
  kyc_verified          Boolean   @default(false)
  kyc_completed_at      DateTime?
  email_verified_at     DateTime?
  phone_verified_at     DateTime?
  identity_verified_at  DateTime?
  is_active             Boolean   @default(true)
  last_login_at         DateTime?
  login_attempts        Int       @default(0)
  locked_until          DateTime?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt

  // Relations
  products              Product[]
  cart_items            CartItem[]
  orders                Order[]
  wishlist_items        WishlistItem[]
  disputes_as_user      Dispute[] @relation("UserDisputes")
  disputes_as_seller    Dispute[] @relation("SellerDisputes")
  admin_actions         AdminAction[] @relation("AdminActions")
  assigned_disputes     Dispute[] @relation("AssignedDisputes")
  payouts               Payout[]
  tickets               Ticket[] @relation("TicketUsers")
  assigned_tickets      Ticket[] @relation("AssignedTickets")
  audit_logs            AuditLog[] @relation("AuditLogUsers")

  @@map("users")
  @@index([email])
  @@index([username])
  @@index([roles])
  @@index([is_active])
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  image       String?
  status      String   @default("active")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("categories")
}

model Coupon {
  id            Int       @id @default(autoincrement())
  code          String    @unique
  description   String?
  type          String    @db.VarChar(20) // percentage, fixed
  value         Decimal   @db.Decimal(10, 2)
  min_amount    Decimal?  @db.Decimal(10, 2)
  max_discount  Decimal?  @db.Decimal(10, 2)
  usage_limit   Int?
  used_count    Int       @default(0)
  status        String    @default("active")
  expires_at    DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  @@map("coupons")
  @@index([code])
  @@index([status])
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  category    String
  images      Json?
  status      String   @default("active")
  seller_id   Int?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  seller      User?    @relation(fields: [seller_id], references: [id], onDelete: SetNull)
  cart_items  CartItem[]
  order_items OrderItem[]
  wishlist_items WishlistItem[]

  @@map("products")
}

model CartItem {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  quantity   Int      @default(1)
  status     String   @default("active")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([user_id, product_id, status])
  @@map("cart")
}

model Order {
  id              Int      @id @default(autoincrement())
  user_id         Int
  total_amount    Decimal  @db.Decimal(10, 2)
  status          String   @default("pending")
  payment_status  String   @default("pending")
  shipping_address Json?
  payment_method  String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  user            User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items           OrderItem[]
  disputes        Dispute[]

  @@map("orders")
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  price      Decimal @db.Decimal(10, 2)
  created_at DateTime @default(now())

  // Relations
  order      Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  created_at DateTime @default(now())

  // Relations
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([user_id, product_id])
  @@map("wishlist")
}

model Dispute {
  id         Int      @id @default(autoincrement())
  order_id   Int
  user_id    Int
  seller_id  Int?
  reason     String   @db.VarChar(255)
  description String?  @db.Text
  status     String   @default("pending") @db.VarChar(50)
  resolution String?  @db.Text
  resolved_by Int?
  resolved_at DateTime?
  assigned_to Int?
  priority   String   @default("medium") @db.VarChar(20)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  user       User     @relation("UserDisputes", fields: [user_id], references: [id], onDelete: Cascade)
  seller     User?    @relation("SellerDisputes", fields: [seller_id], references: [id], onDelete: SetNull)
  assigned_admin User? @relation("AssignedDisputes", fields: [assigned_to], references: [id], onDelete: SetNull)

  @@map("disputes")
  @@index([status])
  @@index([priority])
  @@index([assigned_to])
}

// Admin Management Models
model AdminAction {
  id          Int      @id @default(autoincrement())
  admin_id    Int
  action_type String   @db.VarChar(100)
  target_type String   @db.VarChar(50)
  target_id   Int
  description String?  @db.Text
  metadata    Json?
  created_at  DateTime @default(now())

  // Relations
  admin       User     @relation("AdminActions", fields: [admin_id], references: [id], onDelete: Cascade)

  @@map("admin_actions")
  @@index([admin_id])
  @@index([action_type])
  @@index([target_type])
}

model SystemLog {
  id          Int      @id @default(autoincrement())
  level       String   @db.VarChar(20) // info, warn, error, debug
  message     String   @db.Text
  context     Json?
  user_id     Int?
  ip_address  String?  @db.VarChar(45)
  user_agent  String?  @db.Text
  created_at  DateTime @default(now())

  @@map("system_logs")
  @@index([level])
  @@index([user_id])
  @@index([created_at])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  user_id     Int?
  action      String   @db.VarChar(100)
  entity_type String   @db.VarChar(50)
  entity_id   Int
  old_values  Json?
  new_values  Json?
  ip_address  String?  @db.VarChar(45)
  user_agent  String?  @db.Text
  created_at  DateTime @default(now())

  // Relations
  user        User?    @relation("AuditLogUsers", fields: [user_id], references: [id], onDelete: SetNull)

  @@map("audit_logs")
  @@index([user_id])
  @@index([action])
  @@index([entity_type])
  @@index([created_at])
}

model AdminInvite {
  id          Int      @id @default(autoincrement())
  email       String   @unique @db.VarChar(255)
  invited_by  Int
  role        String   @db.VarChar(50)
  token       String   @unique @db.VarChar(255)
  expires_at  DateTime
  used_at     DateTime?
  created_at  DateTime @default(now())

  @@map("admin_invites")
  @@index([email])
  @@index([token])
  @@index([expires_at])
}

model Payout {
  id              Int      @id @default(autoincrement())
  seller_id       Int
  amount          Decimal  @db.Decimal(10, 2)
  status          String   @default("pending") @db.VarChar(20) // pending, processing, completed, failed
  method          String?  @db.VarChar(50) // bank_transfer, paypal, stripe
  reference       String?  @db.VarChar(255)
  description     String?  @db.Text
  notes           String?  @db.Text
  request_date    DateTime @default(now())
  process_date    DateTime?
  completed_date  DateTime?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  seller          User     @relation(fields: [seller_id], references: [id], onDelete: Cascade)

  @@map("payouts")
  @@index([seller_id])
  @@index([status])
  @@index([request_date])
}

model Ticket {
  id              Int      @id @default(autoincrement())
  user_id         Int
  subject         String   @db.VarChar(255)
  message         String   @db.Text
  status          String   @default("open") @db.VarChar(20) // open, in_progress, resolved, closed
  priority        String   @default("medium") @db.VarChar(20) // low, medium, high, urgent
  category        String?  @db.VarChar(100) // support, technical, billing, general
  assigned_to     Int?
  resolved_at     DateTime?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relations
  user            User     @relation("TicketUsers", fields: [user_id], references: [id], onDelete: Cascade)
  assigned_admin  User?    @relation("AssignedTickets", fields: [assigned_to], references: [id], onDelete: SetNull)

  @@map("tickets")
  @@index([user_id])
  @@index([status])
  @@index([priority])
  @@index([assigned_to])
  @@index([created_at])
}
