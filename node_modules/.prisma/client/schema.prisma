// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int       @id @default(autoincrement())
  name                 String
  email                String    @unique
  password             String
  phone                String?
  avatar               String?
  roles                Json      @default("[\"user\"]")
  kyc_status           Json      @default("{\"email\": false, \"phone\": false, \"identity\": false}")
  email_verified_at    DateTime?
  phone_verified_at    DateTime?
  identity_verified_at DateTime?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt

  // Relations
  products           Product[]
  cart_items         CartItem[]
  orders             Order[]
  wishlist_items     WishlistItem[]
  disputes_as_user   Dispute[]      @relation("UserDisputes")
  disputes_as_seller Dispute[]      @relation("SellerDisputes")

  @@map("users")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  image       String?
  status      String   @default("active")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  category    String
  images      Json?
  status      String   @default("active")
  seller_id   Int?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  seller         User?          @relation(fields: [seller_id], references: [id], onDelete: SetNull)
  cart_items     CartItem[]
  order_items    OrderItem[]
  wishlist_items WishlistItem[]

  @@map("products")
}

model CartItem {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  quantity   Int      @default(1)
  status     String   @default("active")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([user_id, product_id, status])
  @@map("cart")
}

model Order {
  id               Int      @id @default(autoincrement())
  user_id          Int
  total_amount     Decimal  @db.Decimal(10, 2)
  status           String   @default("pending")
  payment_status   String   @default("pending")
  shipping_address Json?
  payment_method   String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // Relations
  user     User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  items    OrderItem[]
  disputes Dispute[]

  @@map("orders")
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  created_at DateTime @default(now())

  // Relations
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([user_id, product_id])
  @@map("wishlist")
}

model Dispute {
  id         Int      @id @default(autoincrement())
  order_id   Int
  user_id    Int
  seller_id  Int?
  reason     String
  status     String   @default("open")
  resolution String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  order  Order @relation(fields: [order_id], references: [id], onDelete: Cascade)
  user   User  @relation("UserDisputes", fields: [user_id], references: [id], onDelete: Cascade)
  seller User? @relation("SellerDisputes", fields: [seller_id], references: [id], onDelete: SetNull)

  @@map("disputes")
}
