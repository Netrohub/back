
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  name: 'name',
  email: 'email',
  password: 'password',
  phone: 'phone',
  avatar: 'avatar',
  email_verified_at: 'email_verified_at',
  phone_verified_at: 'phone_verified_at',
  is_active: 'is_active',
  is_banned: 'is_banned',
  banned_until: 'banned_until',
  ban_reason: 'ban_reason',
  last_login_at: 'last_login_at',
  login_attempts: 'login_attempts',
  locked_until: 'locked_until',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  permissions: 'permissions',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  role_id: 'role_id',
  granted_by: 'granted_by',
  granted_at: 'granted_at',
  expires_at: 'expires_at',
  created_at: 'created_at'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  image: 'image',
  parent_id: 'parent_id',
  sort_order: 'sort_order',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  price: 'price',
  discount_price: 'discount_price',
  category_id: 'category_id',
  seller_id: 'seller_id',
  platform: 'platform',
  game: 'game',
  account_level: 'account_level',
  account_username: 'account_username',
  status: 'status',
  stock_quantity: 'stock_quantity',
  delivery_time: 'delivery_time',
  setup_instructions: 'setup_instructions',
  views_count: 'views_count',
  sales_count: 'sales_count',
  rating_avg: 'rating_avg',
  rating_count: 'rating_count',
  is_featured: 'is_featured',
  featured_until: 'featured_until',
  metadata: 'metadata',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.ProductImageScalarFieldEnum = {
  id: 'id',
  product_id: 'product_id',
  image_url: 'image_url',
  alt_text: 'alt_text',
  sort_order: 'sort_order',
  is_primary: 'is_primary',
  created_at: 'created_at'
};

exports.Prisma.ProductReviewScalarFieldEnum = {
  id: 'id',
  product_id: 'product_id',
  user_id: 'user_id',
  order_id: 'order_id',
  rating: 'rating',
  title: 'title',
  comment: 'comment',
  is_verified: 'is_verified',
  helpful_count: 'helpful_count',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  order_number: 'order_number',
  buyer_id: 'buyer_id',
  seller_id: 'seller_id',
  subtotal: 'subtotal',
  service_fee: 'service_fee',
  discount_amount: 'discount_amount',
  total_amount: 'total_amount',
  status: 'status',
  payment_status: 'payment_status',
  payment_method: 'payment_method',
  payment_transaction_id: 'payment_transaction_id',
  buyer_email: 'buyer_email',
  buyer_phone: 'buyer_phone',
  payment_completed_at: 'payment_completed_at',
  delivered_at: 'delivered_at',
  completed_at: 'completed_at',
  cancelled_at: 'cancelled_at',
  refunded_at: 'refunded_at',
  notes: 'notes',
  metadata: 'metadata',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  product_id: 'product_id',
  product_name: 'product_name',
  quantity: 'quantity',
  unit_price: 'unit_price',
  total_price: 'total_price',
  metadata: 'metadata',
  created_at: 'created_at'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  user_id: 'user_id',
  type: 'type',
  amount: 'amount',
  fee_amount: 'fee_amount',
  net_amount: 'net_amount',
  currency: 'currency',
  payment_method: 'payment_method',
  status: 'status',
  reference: 'reference',
  gateway: 'gateway',
  gateway_response: 'gateway_response',
  processed_at: 'processed_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  product_id: 'product_id',
  quantity: 'quantity',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.WishlistItemScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  product_id: 'product_id',
  created_at: 'created_at'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  type: 'type',
  value: 'value',
  min_amount: 'min_amount',
  max_discount: 'max_discount',
  usage_limit: 'usage_limit',
  user_limit: 'user_limit',
  used_count: 'used_count',
  is_active: 'is_active',
  starts_at: 'starts_at',
  expires_at: 'expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DisputeScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  buyer_id: 'buyer_id',
  seller_id: 'seller_id',
  reason: 'reason',
  description: 'description',
  status: 'status',
  priority: 'priority',
  assigned_to: 'assigned_to',
  resolution: 'resolution',
  resolved_at: 'resolved_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DisputeMessageScalarFieldEnum = {
  id: 'id',
  dispute_id: 'dispute_id',
  sender_id: 'sender_id',
  message: 'message',
  is_internal: 'is_internal',
  created_at: 'created_at'
};

exports.Prisma.DisputeEvidenceScalarFieldEnum = {
  id: 'id',
  dispute_id: 'dispute_id',
  uploaded_by: 'uploaded_by',
  file_url: 'file_url',
  file_name: 'file_name',
  file_type: 'file_type',
  file_size: 'file_size',
  description: 'description',
  created_at: 'created_at'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  ticket_number: 'ticket_number',
  user_id: 'user_id',
  subject: 'subject',
  message: 'message',
  status: 'status',
  priority: 'priority',
  category: 'category',
  assigned_to: 'assigned_to',
  resolved_at: 'resolved_at',
  first_response_at: 'first_response_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TicketMessageScalarFieldEnum = {
  id: 'id',
  ticket_id: 'ticket_id',
  sender_id: 'sender_id',
  message: 'message',
  is_internal: 'is_internal',
  created_at: 'created_at'
};

exports.Prisma.KycVerificationScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  type: 'type',
  status: 'status',
  provider: 'provider',
  external_id: 'external_id',
  data: 'data',
  documents: 'documents',
  notes: 'notes',
  verified_at: 'verified_at',
  rejected_at: 'rejected_at',
  expires_at: 'expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  token: 'token',
  expires_at: 'expires_at',
  used_at: 'used_at',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  created_at: 'created_at'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  device_name: 'device_name',
  device_type: 'device_type',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  location: 'location',
  is_active: 'is_active',
  last_activity_at: 'last_activity_at',
  expires_at: 'expires_at',
  created_at: 'created_at'
};

exports.Prisma.AdminActionScalarFieldEnum = {
  id: 'id',
  admin_id: 'admin_id',
  action_type: 'action_type',
  target_type: 'target_type',
  target_id: 'target_id',
  description: 'description',
  metadata: 'metadata',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  created_at: 'created_at'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  action: 'action',
  entity_type: 'entity_type',
  entity_id: 'entity_id',
  old_values: 'old_values',
  new_values: 'new_values',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  created_at: 'created_at'
};

exports.Prisma.SystemLogScalarFieldEnum = {
  id: 'id',
  level: 'level',
  message: 'message',
  context: 'context',
  user_id: 'user_id',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  created_at: 'created_at'
};

exports.Prisma.AdminInviteScalarFieldEnum = {
  id: 'id',
  email: 'email',
  invited_by: 'invited_by',
  role_slug: 'role_slug',
  token: 'token',
  expires_at: 'expires_at',
  used_at: 'used_at',
  created_at: 'created_at'
};

exports.Prisma.PayoutScalarFieldEnum = {
  id: 'id',
  seller_id: 'seller_id',
  amount: 'amount',
  fee_amount: 'fee_amount',
  net_amount: 'net_amount',
  currency: 'currency',
  status: 'status',
  method: 'method',
  reference: 'reference',
  description: 'description',
  notes: 'notes',
  requested_at: 'requested_at',
  processed_at: 'processed_at',
  completed_at: 'completed_at',
  failed_at: 'failed_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.ProductStatus = exports.$Enums.ProductStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  ACTIVE: 'ACTIVE',
  SOLD: 'SOLD',
  INACTIVE: 'INACTIVE',
  REJECTED: 'REJECTED',
  SUSPENDED: 'SUSPENDED'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  PARTIAL_REFUND: 'PARTIAL_REFUND'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  PAYMENT: 'PAYMENT',
  REFUND: 'REFUND',
  PAYOUT: 'PAYOUT',
  FEE: 'FEE',
  CHARGEBACK: 'CHARGEBACK'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.CartStatus = exports.$Enums.CartStatus = {
  ACTIVE: 'ACTIVE',
  SAVED_FOR_LATER: 'SAVED_FOR_LATER',
  ABANDONED: 'ABANDONED'
};

exports.CouponType = exports.$Enums.CouponType = {
  PERCENTAGE: 'PERCENTAGE',
  FIXED_AMOUNT: 'FIXED_AMOUNT',
  FREE_SHIPPING: 'FREE_SHIPPING'
};

exports.DisputeStatus = exports.$Enums.DisputeStatus = {
  PENDING: 'PENDING',
  INVESTIGATING: 'INVESTIGATING',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED',
  ESCALATED: 'ESCALATED'
};

exports.DisputePriority = exports.$Enums.DisputePriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.TicketStatus = exports.$Enums.TicketStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  WAITING_FOR_CUSTOMER: 'WAITING_FOR_CUSTOMER',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

exports.TicketPriority = exports.$Enums.TicketPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.KycType = exports.$Enums.KycType = {
  EMAIL: 'EMAIL',
  PHONE: 'PHONE',
  IDENTITY: 'IDENTITY',
  ADDRESS: 'ADDRESS',
  BANK_ACCOUNT: 'BANK_ACCOUNT'
};

exports.KycStatus = exports.$Enums.KycStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.LogLevel = exports.$Enums.LogLevel = {
  DEBUG: 'DEBUG',
  INFO: 'INFO',
  WARN: 'WARN',
  ERROR: 'ERROR',
  FATAL: 'FATAL'
};

exports.PayoutStatus = exports.$Enums.PayoutStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  UserRole: 'UserRole',
  Category: 'Category',
  Product: 'Product',
  ProductImage: 'ProductImage',
  ProductReview: 'ProductReview',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Transaction: 'Transaction',
  CartItem: 'CartItem',
  WishlistItem: 'WishlistItem',
  Coupon: 'Coupon',
  Dispute: 'Dispute',
  DisputeMessage: 'DisputeMessage',
  DisputeEvidence: 'DisputeEvidence',
  Ticket: 'Ticket',
  TicketMessage: 'TicketMessage',
  KycVerification: 'KycVerification',
  PasswordReset: 'PasswordReset',
  UserSession: 'UserSession',
  AdminAction: 'AdminAction',
  AuditLog: 'AuditLog',
  SystemLog: 'SystemLog',
  AdminInvite: 'AdminInvite',
  Payout: 'Payout'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
